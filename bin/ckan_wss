#!/usr/bin/env python
'''Twisted-powered(autobahn & txredis) WebSocket server for ckanext-realtime.

This server listens for realtime events from Redis (pub/sub) and sends them to 
WebSocket clients.

'''
from __future__ import absolute_import

import argparse
import ConfigParser
import sys

from twisted.internet import reactor
from twisted.python import log

import ckanext.realtime.event.datastore as de
import ckanext.realtime.twisted.websocket as ws
import ckanext.realtime.twisted.redis as rd

def main(config, test):
    log.startLogging(sys.stdout)
    
    if not test:
        apikey = config.get('app:main', 'ckan.realtime.apikey')
        ckan_api_url = config.get('app:main', 'ckan.realtime.ckan_api_url')
        
        redis_host = config.get('app:main', 'ckan.realtime.redis_host')
        redis_port = int(config.get('app:main', 'ckan.realtime.redis_port'))
        
        wss_port = config.get('app:main', 'ckan.realtime.wss_port')
        wss_url = 'ws://127.0.0.1:{}'.format(wss_port)
    else: 
        #no need to connect to the real api if running in the test mode
        apikey = 'foo'
        ckan_api_url = 'foobar'
        
        redis_host = '127.0.0.1'
        redis_port = 6379
        
        wss_url = 'ws://127.0.0.1:9000'
    
    
    events_for_subscribing = [de.DatastoreInsertEvent,
                              de.DatastoreDeleteEvent,
                              de.DatastoreUpdateEvent]
    
    websocket_factory = ws.CkanWebSocketServerFactory(wss_url,
                                                      ckan_api_url,
                                                      apikey,
                                                      test)
    websocket_factory.listen()
    rd.connect_event_processor(redis_host,
                               redis_port,
                               websocket_factory,
                               events_for_subscribing)
    
    reactor.run()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Run CKAN WebSocket server')
    parser.add_argument("config")
    
    # this flag is used for client testing sessions - it enables the 
    # WebSocket server to provide fake replies to the clients, in some cases
    parser.add_argument('--test', dest='test', action='store_true')
    parser.set_defaults(test=False)
    
    args = parser.parse_args()
    
    config = ConfigParser.RawConfigParser()
    config.read(args.config)
    
    main(config, args.test)
